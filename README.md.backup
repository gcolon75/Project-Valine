# Project Valine

A collaborative platform for voice actors, writers, and artists to create and share scripts, auditions, and creative content.

> üìñ **New to Project Valine?** Check out [PROJECT_VALINE_SUMMARY.md](PROJECT_VALINE_SUMMARY.md) for a comprehensive overview of the project, architecture, current status, and next steps.

## Table of Contents

- [Overview](#overview)
- [Current Status](#current-status)
- [Key Features](#key-features)
- [Architecture](#architecture)
- [Quick Start](#quick-start)
  - [Prerequisites](#prerequisites)
  - [Client Development](#client-development)
  - [Backend Deployment](#backend-deployment)
  - [Orchestrator Setup](#orchestrator-setup)
- [Project Structure](#project-structure)
- [Available Routes](#available-routes)
- [Deployment & Verification](#deployment--verification)
- [Documentation](#documentation)
- [Contributing](#contributing)
- [Development](#development)

## Overview

Project Valine is a **LinkedIn-style collaborative platform** specifically designed for voice actors, writers, and artists. The platform enables creative professionals to create and share scripts, auditions, and creative content while managing collaboration workflows through an AWS-hosted serverless infrastructure with AI-powered automation via Discord bots.

### High-Level Goals

1. **Professional Networking** - User profiles, connections, content feeds
2. **Creative Content Management** - Script creation, audition submissions, collaborative workflows
3. **AI-Powered Automation** - Discord bot orchestration, automated deployments, intelligent triage
4. **AWS Cloud Infrastructure** - Serverless backend with Lambda, API Gateway, DynamoDB, S3, and CloudFront

‚úÖ **Active Development** - Phase 6 Complete

### Recent Achievements

- **Discord Bot Integration**: Unified "Rin" bot with specialized agent personalities for deployment, triage, and monitoring
- **DynamoDB Persistence**: Conversation state and audit logs stored in DynamoDB with TTL auto-cleanup
- **Staged Deployment Flow**: GitHub Actions workflows for automated client and orchestrator deployments
- **Automated Triage**: `/triage` command analyzes CI/CD failures and proposes fixes
- **Deployment Verification**: Comprehensive health checks with `/verify-latest` and `/diagnose` commands

### Quick Links

- [Latest Changes](CHANGELOG.md)
- [Setup Discord Bot](orchestrator/README.md)
- [Deployment Guide](orchestrator/docs/)
- [Troubleshooting](docs/troubleshooting/)

## Key Features

### Platform Features
- **Client Application**: React + Vite client with authentication and role-based access
- **User Profiles**: Portfolio management, connections, and professional networking
- **Content Management**: Sanity CMS for structured content
- **Messaging System**: Real-time communication between users
- **Script & Audition Management**: Create, share, and manage creative content

### Infrastructure & Automation
- **Serverless Backend**: AWS Lambda functions with API Gateway
- **Discord Bot Orchestrator**: Unified "Rin" bot with specialized agent personalities
  - Deployment automation (`/deploy-client`)
  - Infrastructure diagnostics (`/diagnose`, `/verify-latest`)
  - CI/CD triage (`/triage`)
  - Status reporting (`/status`, `/status-digest`)
- **DynamoDB Persistence**: State management with automatic TTL cleanup
- **GitHub Actions Integration**: Automated workflows for CI/CD
- **Staged Deployment**: Separate staging and production environments

## Architecture

### Frontend
- **Technology**: React 18 + Vite 5
- **Styling**: Tailwind CSS 3
- **Routing**: React Router v6
- **Deployment**: AWS S3 + CloudFront CDN

### Backend
- **API Framework**: Serverless Framework v3, AWS SAM
- **Runtime**: Node.js 20.x (API), Python 3.11 (Orchestrator)
- **Database**: DynamoDB (orchestrator state), Prisma ORM (API)
- **File Storage**: S3 with presigned URLs

### Orchestrator (Discord Bot)
- **Framework**: AWS SAM
- **Runtime**: Python 3.11
- **State Storage**: DynamoDB with TTL
- **Integrations**: Discord API, GitHub Actions API

### Key AWS Resources
- **S3**: Frontend hosting, file uploads, build artifacts
- **CloudFront**: CDN for global distribution
- **Lambda**: Serverless functions for API and orchestrator
- **API Gateway**: REST APIs for orchestrator and backend
- **DynamoDB**: State management and audit logs
- **SSM Parameter Store**: Configuration and feature flags

## Quick Start

### Prerequisites
- Node.js 20.x or later
- Python 3.11 (for orchestrator)
- AWS CLI configured (for deployment)
- Discord bot token (for orchestrator)
- GitHub personal access token (for orchestrator)

### Client Development

1. **Install dependencies:**
   ```bash
   npm install
   ```

2. **Start development server:**
   ```bash
   npm run dev
   # Opens on http://localhost:5173 (Vite default)
   ```

3. **Build for production:**
   ```bash
   npm run build
   npm run preview  # Preview production build locally
   ```

### Backend Deployment

**Serverless API** (`/serverless`):
```bash
cd serverless
npm install
npx serverless deploy --stage dev
```

**Infrastructure API** (`/infra`):
```bash
cd infra
npx serverless deploy --stage dev
```

See [serverless/README.md](serverless/) and [infra/README.md](infra/) for detailed configuration.

### Orchestrator Setup

The orchestrator manages Discord bot interactions and GitHub Actions automation.

**Quick Setup:**
```bash
cd orchestrator

# Configure credentials
cp samconfig.toml.example samconfig.toml
# Edit samconfig.toml with your Discord and GitHub credentials

# Build and deploy
sam build
sam deploy --guided
```

**Register Discord Commands:**
```bash
# For staging (instant visibility)
./scripts/register_staging_slash_commands.sh

# Configure Discord Interactions Endpoint in Developer Portal
# Use the DiscordWebhookUrl from deployment outputs
```

**Detailed Guide:** [orchestrator/README.md](orchestrator/README.md)

## Project Structure

```
Project-Valine/
‚îú‚îÄ‚îÄ src/                    # React client source
‚îÇ   ‚îú‚îÄ‚îÄ components/         # Reusable UI components
‚îÇ   ‚îú‚îÄ‚îÄ pages/             # Page components
‚îÇ   ‚îú‚îÄ‚îÄ routes/            # Route definitions
‚îÇ   ‚îî‚îÄ‚îÄ services/          # API services
‚îÇ
‚îú‚îÄ‚îÄ serverless/            # Serverless API
‚îÇ   ‚îú‚îÄ‚îÄ handler.js         # API router
‚îÇ   ‚îî‚îÄ‚îÄ serverless.yml     # Configuration
‚îÇ
‚îú‚îÄ‚îÄ infra/                 # Infrastructure code
‚îÇ   ‚îî‚îÄ‚îÄ serverless.yml     # Presign function config
‚îÇ
‚îú‚îÄ‚îÄ orchestrator/          # Discord bot & automation
‚îÇ   ‚îú‚îÄ‚îÄ app/              # Application code
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ handlers/     # Lambda handlers
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ agents/       # Agent implementations
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ services/     # External service clients
‚îÇ   ‚îú‚îÄ‚îÄ tests/            # Test suite
‚îÇ   ‚îú‚îÄ‚îÄ scripts/          # Automation scripts
‚îÇ   ‚îî‚îÄ‚îÄ template.yaml     # SAM template
‚îÇ
‚îú‚îÄ‚îÄ api/                   # API utilities
‚îÇ   ‚îî‚îÄ‚îÄ prisma/           # Database schema
‚îÇ
‚îú‚îÄ‚îÄ docs/                  # Documentation
‚îÇ   ‚îú‚îÄ‚îÄ diagnostics/      # Reports and diagnostics
‚îÇ   ‚îú‚îÄ‚îÄ troubleshooting/  # Issue resolution guides
‚îÇ   ‚îî‚îÄ‚îÄ archive/          # Historical documentation
‚îÇ
‚îú‚îÄ‚îÄ .github/
‚îÇ   ‚îú‚îÄ‚îÄ workflows/        # CI/CD pipelines
‚îÇ   ‚îî‚îÄ‚îÄ agents/           # AI agent configurations
‚îÇ
‚îú‚îÄ‚îÄ scripts/              # Utility scripts
‚îú‚îÄ‚îÄ public/               # Static assets
‚îî‚îÄ‚îÄ sanity/               # Sanity CMS config
```

## Available Routes

### Public Pages
- `/` - Home page
- `/about` - About page
- `/login` - Authentication

### Authenticated Pages
- `/feed` - Main content feed
- `/search` - Search functionality
- `/messages` - Messaging system
- `/bookmarks` - Saved content
- `/notifications` - User notifications
- `/settings` - User settings
- `/profile/:id` - User profiles
- `/scripts/*` - Script management
- `/auditions/*` - Audition management
- `/requests` - Access requests

## Development

- Both `npm run dev` and `npm start` work (they run Vite)
- Build with `npm run build`, preview with `npm run preview`
- Edit pages in `src/pages/` and routes in `src/App.jsx`

## Deployment Verification

The repository includes a comprehensive verification script to validate deployments:

```bash
./scripts/verify-deployment.sh --help
```

This script checks:
- GitHub Actions workflows and configuration files
- S3 and CloudFront deployment status
- Frontend accessibility and API health endpoints
- Discord bot and webhook integration

See [scripts/VERIFICATION_GUIDE.md](scripts/VERIFICATION_GUIDE.md) for detailed usage instructions.

## Documentation

> üìÅ **Organized Documentation**: Most documentation has been moved to the `/docs` directory for better organization. See [docs/README.md](docs/README.md) for the complete structure.

### Getting Started
- **[Project Summary](PROJECT_VALINE_SUMMARY.md)** - Comprehensive overview of Project Valine: architecture, current status, goals, and next steps

### Troubleshooting
- [Discord Issues](docs/troubleshooting/discord/) - Discord bot debugging, slash command fixes, and endpoint diagnostics

### Diagnostics & Reports  
- [Phase Reports](docs/diagnostics/) - Phase 5/6 validation, implementation summaries, and verification reports
- [Deployment Verification](docs/diagnostics/DEPLOYMENT_VERIFICATION.md) - Comprehensive deployment verification system

### Archive
- [Historical Documentation](docs/archive/) - Completed phases, old summaries, and deprecated guides

### Orchestrator (Current Location - To Be Migrated)
- [Orchestrator Documentation](orchestrator/README.md) - AI workflow automation
- [Integration Guide](orchestrator/INTEGRATION_GUIDE.md) - Discord and GitHub setup
- [Testing Guide](orchestrator/TESTING_GUIDE.md) - End-to-end testing
- [Orchestrator Consolidation Plan](docs/archive/ORCHESTRATOR_CONSOLIDATION.md) - Migration plan to ghawk75-ai-agent

### Deployment & Verification
- [Deployment Verification](docs/diagnostics/DEPLOYMENT_VERIFICATION.md) - Comprehensive deployment verification system
- [Verification Guide](scripts/VERIFICATION_GUIDE.md) - Detailed verification usage and troubleshooting

### AI Agents
- [UX Designer Agent](.github/agents/ux-designer.md) - User experience improvements and implementation
- [Quick Start Guide](.github/agents/QUICK_START.md) - Quick reference for using the UX Designer agent
- [Agent Templates](.github/agents/templates/) - Reusable templates for PRs, RFCs, and documentation

### Other Documentation
- [Sanity Setup](SANITY_SETUP.md) - CMS configuration
- [UX Changes](CHANGES.md) - Log of user experience improvements and design changes
