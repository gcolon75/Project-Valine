name: Bot Smoke Tests

on:
  pull_request:
    paths:
      - 'orchestrator/**'
      - '.github/workflows/bot-smoke.yml'
  schedule:
    # Run daily at 09:00 UTC (optional)
    - cron: '0 9 * * *'
  workflow_dispatch:

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: orchestrator
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'orchestrator/requirements.txt'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest flake8
      
      - name: Lint with flake8
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app tests --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app tests --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
        continue-on-error: false
      
      - name: Run unit tests
        run: |
          python -m pytest tests/ -v --tb=short
        env:
          PYTHONPATH: ${{ github.workspace }}/orchestrator
      
      - name: Validate agent prompts
        run: |
          # Check that agent prompt files exist and are not empty
          for prompt_file in agent-prompts/*.md; do
            if [ -f "$prompt_file" ]; then
              size=$(stat -f%z "$prompt_file" 2>/dev/null || stat -c%s "$prompt_file")
              if [ "$size" -lt 100 ]; then
                echo "Error: $prompt_file is too small (${size} bytes)"
                exit 1
              fi
              echo "✓ $prompt_file validated (${size} bytes)"
            fi
          done
        continue-on-error: false
      
      - name: Check for common security issues
        run: |
          # Check for accidentally committed secrets
          if grep -r "ghp_" app/ tests/ 2>/dev/null | grep -v "test" | grep -v "#"; then
            echo "Error: Found potential GitHub token in code"
            exit 1
          fi
          if grep -r "sk_live_" app/ tests/ 2>/dev/null | grep -v "test" | grep -v "#"; then
            echo "Error: Found potential API key in code"
            exit 1
          fi
          echo "✓ No obvious secrets found in code"
      
      - name: Generate test summary
        if: always()
        run: |
          echo "## Bot Smoke Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ All smoke tests passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some smoke tests failed. Please check the logs above." >> $GITHUB_STEP_SUMMARY
          fi
  
  notify-discord:
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: |
      always() && 
      github.event_name == 'schedule' &&
      vars.ENABLE_DAILY_SMOKE_NOTIFICATIONS == 'true'
    
    steps:
      - name: Send Discord notification
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}
          CHANNEL_ID: ${{ vars.DISCORD_TARGET_CHANNEL_ID }}
        run: |
          STATUS="${{ needs.lint-and-test.result }}"
          
          if [ "$STATUS" == "success" ]; then
            EMOJI="✅"
            TITLE="Daily Smoke Tests Passed"
            COLOR="3066993"
          else
            EMOJI="❌"
            TITLE="Daily Smoke Tests Failed"
            COLOR="15158332"
          fi
          
          MESSAGE="${EMOJI} **${TITLE}**\n\n"
          MESSAGE="${MESSAGE}Repository: \`${{ github.repository }}\`\n"
          MESSAGE="${MESSAGE}Date: $(date -u '+%Y-%m-%d %H:%M:%S UTC')\n"
          MESSAGE="${MESSAGE}\n[View Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          
          payload=$(jq -nc --arg content "$MESSAGE" '{content: $content}')
          
          curl -X POST "https://discord.com/api/v10/channels/${CHANNEL_ID}/messages" \
            -H "Authorization: Bot ${DISCORD_BOT_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "$payload"
