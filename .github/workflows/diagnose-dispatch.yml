name: Diagnose on Demand

on:
  workflow_dispatch:
    inputs:
      correlation_id:
        description: "Correlation ID for tracking (UUID)"
        required: false
        default: ""
      requester:
        description: "Requester username or ID"
        required: false
        default: ""
      channel_id:
        description: "Discord channel ID"
        required: false
        default: ""
      thread_id:
        description: "Discord thread ID"
        required: false
        default: ""
      frontend_url:
        description: "Frontend URL override"
        required: false
        default: ""
      api_base:
        description: "API base URL override"
        required: false
        default: ""
  repository_dispatch:
    types: [diagnose.request]

run-name: "Diagnose on Demand — ${{ inputs.correlation_id || github.event.client_payload.correlation_id || github.sha }} by ${{ inputs.requester || github.event.client_payload.requester || github.actor }}"

jobs:
  diagnose:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-west-2
      # Resolve inputs from workflow_dispatch or repository_dispatch
      CORRELATION_ID: ${{ inputs.correlation_id || github.event.client_payload.correlation_id || github.sha }}
      REQUESTER: ${{ inputs.requester || github.event.client_payload.requester || github.actor }}
      CHANNEL_ID: ${{ inputs.channel_id || github.event.client_payload.channel_id || '' }}
      THREAD_ID: ${{ inputs.thread_id || github.event.client_payload.thread_id || '' }}
      EFFECTIVE_VITE_API_BASE: ${{ inputs.api_base || github.event.client_payload.api_base || secrets.VITE_API_BASE }}
      EFFECTIVE_FRONTEND_URL: ${{ inputs.frontend_url || github.event.client_payload.frontend_url || secrets.FRONTEND_BASE_URL }}
      EFFECTIVE_S3_BUCKET: ${{ secrets.S3_BUCKET }}
      EFFECTIVE_CLOUDFRONT_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
    
    steps:
      - name: Install jq if missing
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
      
      - name: Initialize summary and timing
        id: init
        run: |
          START_TIME=$(date +%s)
          echo "start_time=$START_TIME" >> "$GITHUB_OUTPUT"
          
          echo "# Diagnose on Demand" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "**Correlation ID:** \`$CORRELATION_ID\`" >> "$GITHUB_STEP_SUMMARY"
          echo "**Requester:** $REQUESTER" >> "$GITHUB_STEP_SUMMARY"
          echo "**Triggered:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Prepare and summarize inputs
        run: |
          echo "## Diagnostic Configuration" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Variable | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|--------|" >> "$GITHUB_STEP_SUMMARY"
          
          if [ -n "$EFFECTIVE_VITE_API_BASE" ]; then
            echo "| VITE_API_BASE | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| VITE_API_BASE | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "$EFFECTIVE_S3_BUCKET" ]; then
            echo "| S3_BUCKET | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| S3_BUCKET | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "$EFFECTIVE_CLOUDFRONT_ID" ]; then
            echo "| CLOUDFRONT_DISTRIBUTION_ID | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| CLOUDFRONT_DISTRIBUTION_ID | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "$EFFECTIVE_FRONTEND_URL" ]; then
            echo "| FRONTEND_BASE_URL | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| FRONTEND_BASE_URL | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Configure AWS via OIDC
        id: aws_config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::579939802800:role/ProjectValine-GitHubDeployRole
          aws-region: ${{ env.AWS_REGION }}
      
      - name: AWS identity check
        id: aws_identity
        run: |
          STEP_START=$(date +%s)
          echo "## AWS Identity Check" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          IDENTITY=$(aws sts get-caller-identity)
          ACCOUNT=$(echo "$IDENTITY" | jq -r '.Account')
          ARN=$(echo "$IDENTITY" | jq -r '.Arn')
          
          echo "- **Account:** $ACCOUNT" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Arn:** $ARN" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          STEP_END=$(date +%s)
          echo "oidc_duration=$((STEP_END - STEP_START))" >> "$GITHUB_OUTPUT"
      
      - name: S3 checks - List bucket
        id: s3_list
        if: env.EFFECTIVE_S3_BUCKET != ''
        continue-on-error: true
        run: |
          STEP_START=$(date +%s)
          echo "## S3 Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Bucket Listing (s3://$EFFECTIVE_S3_BUCKET)" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          aws s3 ls "s3://$EFFECTIVE_S3_BUCKET" 2>&1 | head -10 >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          STEP_END=$(date +%s)
          echo "s3_read_duration=$((STEP_END - STEP_START))" >> "$GITHUB_OUTPUT"
      
      - name: S3 checks - Check index.html
        id: s3_index
        if: env.EFFECTIVE_S3_BUCKET != ''
        continue-on-error: true
        run: |
          echo "### Index.html Check" >> "$GITHUB_STEP_SUMMARY"
          if aws s3 ls "s3://$EFFECTIVE_S3_BUCKET/index.html" &> /dev/null; then
            echo "✅ index.html found" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            
            # Get cache-control for index.html
            echo "**index.html headers:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            aws s3api head-object --bucket "$EFFECTIVE_S3_BUCKET" --key "index.html" 2>&1 | jq -r '.CacheControl // "No Cache-Control header"' >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ index.html not found" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
      
      - name: CloudFront checks - Get distribution
        id: cf_distribution
        if: env.EFFECTIVE_CLOUDFRONT_ID != ''
        continue-on-error: true
        run: |
          STEP_START=$(date +%s)
          echo "## CloudFront Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          DIST_INFO=$(aws cloudfront get-distribution --id "$EFFECTIVE_CLOUDFRONT_ID" 2>&1)
          
          if echo "$DIST_INFO" | jq -e '.Distribution' > /dev/null 2>&1; then
            DOMAIN=$(echo "$DIST_INFO" | jq -r '.Distribution.DomainName')
            STATUS=$(echo "$DIST_INFO" | jq -r '.Distribution.Status')
            
            echo "### Distribution Info" >> "$GITHUB_STEP_SUMMARY"
            echo "- **DomainName:** $DOMAIN" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Status:** $STATUS" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Failed to get distribution info" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$DIST_INFO" | head -5 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          STEP_END=$(date +%s)
          echo "cloudfront_duration=$((STEP_END - STEP_START))" >> "$GITHUB_OUTPUT"
      
      - name: HTTP checks - API health endpoint
        id: http_api_health
        if: env.EFFECTIVE_VITE_API_BASE != ''
        continue-on-error: true
        run: |
          STEP_START=$(date +%s)
          echo "## HTTP Reachability Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### API Health ($EFFECTIVE_VITE_API_BASE/health)" >> "$GITHUB_STEP_SUMMARY"
          
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/api_health_body.txt "$EFFECTIVE_VITE_API_BASE/health" 2>&1 || echo "000")
          
          echo "- **Status Code:** $HTTP_CODE" >> "$GITHUB_STEP_SUMMARY"
          
          if [ -f /tmp/api_health_body.txt ] && [ -s /tmp/api_health_body.txt ]; then
            echo "- **Body:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            head -20 /tmp/api_health_body.txt >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          STEP_END=$(date +%s)
          DURATION_MS=$(( (STEP_END - STEP_START) * 1000 ))
          echo "api_health_status=$HTTP_CODE" >> "$GITHUB_OUTPUT"
          echo "api_health_ms=$DURATION_MS" >> "$GITHUB_OUTPUT"
      
      - name: HTTP checks - API hello endpoint
        id: http_api_hello
        if: env.EFFECTIVE_VITE_API_BASE != ''
        continue-on-error: true
        run: |
          STEP_START=$(date +%s)
          echo "### API Hello ($EFFECTIVE_VITE_API_BASE/hello)" >> "$GITHUB_STEP_SUMMARY"
          
          HTTP_CODE=$(curl -sS -w "%{http_code}" -o /tmp/api_hello_body.txt "$EFFECTIVE_VITE_API_BASE/hello" 2>&1 || echo "000")
          
          echo "- **Status Code:** $HTTP_CODE" >> "$GITHUB_STEP_SUMMARY"
          
          if [ -f /tmp/api_hello_body.txt ] && [ -s /tmp/api_hello_body.txt ]; then
            echo "- **Response:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            head -20 /tmp/api_hello_body.txt >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          STEP_END=$(date +%s)
          DURATION_MS=$(( (STEP_END - STEP_START) * 1000 ))
          echo "api_hello_status=$HTTP_CODE" >> "$GITHUB_OUTPUT"
          echo "api_hello_ms=$DURATION_MS" >> "$GITHUB_OUTPUT"
      
      - name: Final status summary and JSON block
        if: always()
        run: |
          echo "## Diagnostic Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Calculate overall duration
          TOTAL_DURATION=$(($(date +%s) - ${{ steps.init.outputs.start_time }}))
          
          # Determine conclusion - only mark as failure if triggered by correct event types
          CONCLUSION="success"
          EVENT_NAME="${{ github.event_name }}"
          
          # Skip failure logic if not triggered by workflow_dispatch or repository_dispatch
          if [ "$EVENT_NAME" != "workflow_dispatch" ] && [ "$EVENT_NAME" != "repository_dispatch" ]; then
            CONCLUSION="skipped"
            echo "⚠️ **Warning:** Workflow triggered by unsupported event type: $EVENT_NAME" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          elif [ "${{ steps.aws_config.outcome }}" != "success" ] || [ "${{ steps.aws_identity.outcome }}" != "success" ]; then
            CONCLUSION="failure"
          fi
          
          # Secrets presence check
          SECRETS_OK="✅"
          if [ -z "$EFFECTIVE_VITE_API_BASE" ] || [ -z "$EFFECTIVE_S3_BUCKET" ] || [ -z "$EFFECTIVE_CLOUDFRONT_ID" ]; then
            SECRETS_OK="⚠️"
          fi
          
          # AWS assume check
          AWS_ASSUME="✅"
          if [ "${{ steps.aws_config.outcome }}" != "success" ] || [ "${{ steps.aws_identity.outcome }}" != "success" ]; then
            AWS_ASSUME="❌"
            if [ "$CONCLUSION" != "skipped" ]; then
              CONCLUSION="failure"
            fi
          fi
          
          # S3 access check
          S3_ACCESS="✅"
          S3_DETAILS="S3 bucket accessible"
          if [ -n "$EFFECTIVE_S3_BUCKET" ]; then
            if [ "${{ steps.s3_list.outcome }}" != "success" ]; then
              S3_ACCESS="❌"
              S3_DETAILS="Failed to list S3 bucket"
              if [ "$CONCLUSION" != "skipped" ]; then
                CONCLUSION="failure"
              fi
            fi
          else
            S3_ACCESS="⚠️"
            S3_DETAILS="S3 bucket not configured"
          fi
          
          # CloudFront access check
          CF_ACCESS="✅"
          CF_DETAILS="CloudFront distribution accessible"
          if [ -n "$EFFECTIVE_CLOUDFRONT_ID" ]; then
            if [ "${{ steps.cf_distribution.outcome }}" != "success" ]; then
              CF_ACCESS="❌"
              CF_DETAILS="Failed to get CloudFront distribution"
              if [ "$CONCLUSION" != "skipped" ]; then
                CONCLUSION="failure"
              fi
            fi
          else
            CF_ACCESS="⚠️"
            CF_DETAILS="CloudFront not configured"
          fi
          
          # API health check
          API_HEALTH_STATUS="${{ steps.http_api_health.outputs.api_health_status }}"
          API_HELLO_STATUS="${{ steps.http_api_hello.outputs.api_hello_status }}"
          API_HEALTH="✅"
          API_DETAILS="API endpoints responding"
          if [ -n "$EFFECTIVE_VITE_API_BASE" ]; then
            if [ "$API_HEALTH_STATUS" != "200" ] && [ "$API_HELLO_STATUS" != "200" ]; then
              API_HEALTH="❌"
              API_DETAILS="API endpoints not responding (health: $API_HEALTH_STATUS, hello: $API_HELLO_STATUS)"
              if [ "$CONCLUSION" != "skipped" ]; then
                CONCLUSION="failure"
              fi
            elif [ "$API_HEALTH_STATUS" != "200" ] || [ "$API_HELLO_STATUS" != "200" ]; then
              API_HEALTH="⚠️"
              API_DETAILS="Some API endpoints failing (health: $API_HEALTH_STATUS, hello: $API_HELLO_STATUS)"
            fi
          else
            API_HEALTH="⚠️"
            API_DETAILS="API base URL not configured"
          fi
          
          echo "| Check | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-------|--------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| Required secrets present | $SECRETS_OK |" >> "$GITHUB_STEP_SUMMARY"
          echo "| AWS OIDC role assume | $AWS_ASSUME |" >> "$GITHUB_STEP_SUMMARY"
          echo "| S3 bucket access | $S3_ACCESS |" >> "$GITHUB_STEP_SUMMARY"
          echo "| CloudFront access | $CF_ACCESS |" >> "$GITHUB_STEP_SUMMARY"
          echo "| API health endpoints | $API_HEALTH |" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Create machine-readable JSON block
          echo "## Machine-Readable Result" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo '```json' >> "$GITHUB_STEP_SUMMARY"
          cat <<EOF >> "$GITHUB_STEP_SUMMARY"
{
  "correlation_id": "$CORRELATION_ID",
  "requester": "$REQUESTER",
  "frontend_url": "$EFFECTIVE_FRONTEND_URL",
  "api_base": "$EFFECTIVE_VITE_API_BASE",
  "checks": {
    "oidc": {
      "ok": $([ "$AWS_ASSUME" = "✅" ] && echo "true" || echo "false"),
      "details": "AWS OIDC role assume"
    },
    "s3_read": {
      "ok": $([ "$S3_ACCESS" = "✅" ] && echo "true" || echo "false"),
      "details": "$S3_DETAILS"
    },
    "cloudfront": {
      "ok": $([ "$CF_ACCESS" = "✅" ] && echo "true" || echo "false"),
      "details": "$CF_DETAILS"
    },
    "api_health": {
      "ok": $([ "$API_HEALTH_STATUS" = "200" ] && echo "true" || echo "false"),
      "status": ${API_HEALTH_STATUS:-0},
      "ms": ${{ steps.http_api_health.outputs.api_health_ms || 0 }}
    },
    "api_hello": {
      "ok": $([ "$API_HELLO_STATUS" = "200" ] && echo "true" || echo "false"),
      "status": ${API_HELLO_STATUS:-0},
      "ms": ${{ steps.http_api_hello.outputs.api_hello_ms || 0 }}
    }
  },
  "durations": {
    "total_s": $TOTAL_DURATION,
    "steps": {
      "oidc": ${{ steps.aws_identity.outputs.oidc_duration || 0 }},
      "s3_read": ${{ steps.s3_list.outputs.s3_read_duration || 0 }},
      "cloudfront": ${{ steps.cf_distribution.outputs.cloudfront_duration || 0 }},
      "api": $(( ${{ steps.http_api_health.outputs.api_health_ms || 0 }} + ${{ steps.http_api_hello.outputs.api_hello_ms || 0 }} ))
    }
  },
  "conclusion": "$CONCLUSION"
}
EOF
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Also save to file for artifact
          mkdir -p /tmp/diagnose-output
          cat <<EOF > /tmp/diagnose-output/diagnose-summary.json
{
  "correlation_id": "$CORRELATION_ID",
  "requester": "$REQUESTER",
  "frontend_url": "$EFFECTIVE_FRONTEND_URL",
  "api_base": "$EFFECTIVE_VITE_API_BASE",
  "checks": {
    "oidc": {
      "ok": $([ "$AWS_ASSUME" = "✅" ] && echo "true" || echo "false"),
      "details": "AWS OIDC role assume"
    },
    "s3_read": {
      "ok": $([ "$S3_ACCESS" = "✅" ] && echo "true" || echo "false"),
      "details": "$S3_DETAILS"
    },
    "cloudfront": {
      "ok": $([ "$CF_ACCESS" = "✅" ] && echo "true" || echo "false"),
      "details": "$CF_DETAILS"
    },
    "api_health": {
      "ok": $([ "$API_HEALTH_STATUS" = "200" ] && echo "true" || echo "false"),
      "status": ${API_HEALTH_STATUS:-0},
      "ms": ${{ steps.http_api_health.outputs.api_health_ms || 0 }}
    },
    "api_hello": {
      "ok": $([ "$API_HELLO_STATUS" = "200" ] && echo "true" || echo "false"),
      "status": ${API_HELLO_STATUS:-0},
      "ms": ${{ steps.http_api_hello.outputs.api_hello_ms || 0 }}
    }
  },
  "durations": {
    "total_s": $TOTAL_DURATION,
    "steps": {
      "oidc": ${{ steps.aws_identity.outputs.oidc_duration || 0 }},
      "s3_read": ${{ steps.s3_list.outputs.s3_read_duration || 0 }},
      "cloudfront": ${{ steps.cf_distribution.outputs.cloudfront_duration || 0 }},
      "api": $(( ${{ steps.http_api_health.outputs.api_health_ms || 0 }} + ${{ steps.http_api_hello.outputs.api_hello_ms || 0 }} ))
    }
  },
  "conclusion": "$CONCLUSION"
}
EOF
          
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "*Diagnostic completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Upload diagnostic artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: diagnose-summary
          path: /tmp/diagnose-output/diagnose-summary.json
          retention-days: 7
