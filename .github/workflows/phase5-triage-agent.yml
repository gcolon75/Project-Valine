---
name: Phase 5 Triage Agent

"on":
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to triage and fix'
        required: false
        type: string

      failure_ref:
        description: 'Failure reference (PR number, workflow run ID, or URL)'
        required: false
        type: string

      mode:
        description: 'Operation mode'
        required: false
        default: 'triage-only'
        type: choice
        options:
          - 'triage-only'
          - 'apply-fixes'

      allow_invasive_fixes:
        description: 'Allow invasive fixes (changes affecting >10 files or >500 lines)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

      allow_auto_fix:
        description: 'Allow automatic fix PR creation (legacy, use mode instead)'
        required: false
        default: false
        type: boolean

      dry_run:
        description: 'Dry run mode (no modifications)'
        required: false
        default: false
        type: boolean

      verbose:
        description: 'Enable verbose output'
        required: false
        default: true
        type: boolean

env:
  REPO: gcolon75/Project-Valine

jobs:
  triage:
    name: Triage Failed Run
    runs-on: ubuntu-latest

    permissions:
      contents: write       # For creating branches
      pull-requests: write  # For creating PRs
      actions: read         # For reading workflow runs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Phase 5 Triage Agent
        working-directory: orchestrator/scripts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Phase 5 Triage Agent..."
          
          # Determine the failure reference (pr_number takes precedence)
          FAILURE_REF="${{ inputs.pr_number || inputs.failure_ref }}"
          
          # Determine mode
          MODE="${{ inputs.mode }}"
          if [ "${{ inputs.allow_auto_fix }}" = "true" ] && [ "$MODE" = "triage-only" ]; then
            MODE="apply-fixes"
          fi
          
          # Build command
          CMD="python phase5_triage_agent.py run --repo \"${{ env.REPO }}\" --failure-ref \"$FAILURE_REF\""
          
          if [ "$MODE" = "apply-fixes" ]; then
            CMD="$CMD --auto-fix"
          fi
          
          if [ "${{ inputs.allow_invasive_fixes }}" = "true" ]; then
            CMD="$CMD --allow-invasive"
          fi
          
          if [ "${{ inputs.dry_run }}" = "true" ]; then
            CMD="$CMD --dry-run"
          fi
          
          if [ "${{ inputs.verbose }}" = "true" ]; then
            CMD="$CMD --verbose"
          fi
          
          echo "Executing: $CMD"
          eval $CMD

      - name: Upload triage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: triage-report-${{ github.run_number }}
          path: |
            orchestrator/scripts/triage_output/**/*
          retention-days: 90

      - name: Generate workflow summary
        if: always()
        working-directory: orchestrator/scripts
        run: |
          FAILURE_REF="${{ inputs.pr_number || inputs.failure_ref }}"
          MODE="${{ inputs.mode }}"
          if [ "${{ inputs.allow_auto_fix }}" = "true" ] && [ "$MODE" = "triage-only" ]; then
            MODE="apply-fixes"
          fi
          
          echo "# Phase 5 Triage Agent Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Ref:** $FAILURE_REF" >> $GITHUB_STEP_SUMMARY
          echo "**Mode:** $MODE" >> $GITHUB_STEP_SUMMARY
          echo "**Allow Invasive Fixes:** ${{ inputs.allow_invasive_fixes }}" >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Include the triage report if it exists
          REPORT_FILE="triage_output/phase5_triage_report.md"

          if [ -f "$REPORT_FILE" ]; then
            echo "## Triage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è No triage report generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Include fix PR URL if available
          FIX_PR_FILE="triage_output/fix_pr_url.txt"
          if [ -f "$FIX_PR_FILE" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Fix PR Created" >> $GITHUB_STEP_SUMMARY
            cat "$FIX_PR_FILE" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Determine PR number from inputs
            let prNumber = parseInt('${{ inputs.pr_number }}') || parseInt('${{ inputs.failure_ref }}');
            
            if (isNaN(prNumber) || prNumber >= 10000) {
              console.log('Not a valid PR number, skipping PR comment');
              return;
            }

            const reportPath = 'orchestrator/scripts/triage_output/phase5_triage_report.md';
            const fixPrPath = 'orchestrator/scripts/triage_output/fix_pr_url.txt';

            if (!fs.existsSync(reportPath)) {
              console.log('No triage report found, skipping PR comment');
              return;
            }

            const report = fs.readFileSync(reportPath, 'utf8');
            
            let comment = `## üîç Phase 5 Triage Report

            A triage analysis has been performed for this PR.

            ${report}`;
            
            // Add fix PR link if available
            if (fs.existsSync(fixPrPath)) {
              const fixPrUrl = fs.readFileSync(fixPrPath, 'utf8').trim();
              comment += `\n\n## üîß Auto-Fix PR Created\n\n${fixPrUrl}`;
            }
            
            comment += `\n\n---\n*Generated by Phase 5 Triage Agent - Run #${{ github.run_number }} | [View Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Phase 5 Triage Agent failed!"
          echo "Check the workflow logs and artifacts for details."
          exit 1
