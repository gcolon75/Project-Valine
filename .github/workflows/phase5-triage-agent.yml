---
name: Phase 5 Triage Agent

"on":
  workflow_dispatch:
    inputs:
      failure_ref:
        description: 'Failure reference (PR number, workflow run ID, or URL)'
        required: true
        type: string

      allow_auto_fix:
        description: 'Allow automatic fix PR creation'
        required: false
        default: false
        type: boolean

      dry_run:
        description: 'Dry run mode (no modifications)'
        required: false
        default: false
        type: boolean

      verbose:
        description: 'Enable verbose output'
        required: false
        default: true
        type: boolean

env:
  REPO: gcolon75/Project-Valine

jobs:
  triage:
    name: Triage Failed Run
    runs-on: ubuntu-latest

    permissions:
      contents: write       # For creating branches
      pull-requests: write  # For creating PRs
      actions: read         # For reading workflow runs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run Phase 5 Triage Agent
        working-directory: orchestrator/scripts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Starting Phase 5 Triage Agent..."
          python phase5_triage_agent.py run \
            --repo "${{ env.REPO }}" \
            --failure-ref "${{ inputs.failure_ref }}" \
            ${{ inputs.allow_auto_fix && '--auto-fix' || '' }} \
            ${{ inputs.dry_run && '--dry-run' || '' }} \
            ${{ inputs.verbose && '--verbose' || '' }}

      - name: Upload triage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: triage-report-${{ github.run_number }}
          path: |
            orchestrator/scripts/triage_output/**/*
          retention-days: 90

      - name: Generate workflow summary
        if: always()
        working-directory: orchestrator/scripts
        run: |
          echo "# Phase 5 Triage Agent Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run ID:** ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Run Number:** ${{ github.run_number }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Failure Ref:** ${{ inputs.failure_ref }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Auto-Fix:** ${{ inputs.allow_auto_fix }}" \
            >> $GITHUB_STEP_SUMMARY
          echo "**Dry Run:** ${{ inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Include the triage report if it exists
          REPORT_FILE="triage_output/phase5_triage_report.md"

          if [ -f "$REPORT_FILE" ]; then
            echo "## Triage Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat "$REPORT_FILE" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No triage report generated" \
              >> $GITHUB_STEP_SUMMARY
          fi

      - name: Comment on PR
        if: >
          success() &&
          startsWith(inputs.failure_ref, 'http') == false &&
          inputs.failure_ref < 10000
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            const reportPath = \
              'orchestrator/scripts/triage_output/phase5_triage_report.md';

            if (!fs.existsSync(reportPath)) {
              console.log('No triage report found, skipping PR comment');
              return;
            }

            const report = fs.readFileSync(reportPath, 'utf8');
            const prNumber = parseInt('${{ inputs.failure_ref }}');

            if (isNaN(prNumber)) {
              console.log('Not a valid PR number, skipping PR comment');
              return;
            }

            const comment = `## 🔍 Phase 5 Triage Report

            A triage analysis has been performed for this PR.

            ${report}

            ---
            *Generated by Phase 5 Triage Agent - Run \
              #${{ github.run_number }}*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: comment
            });

      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ Phase 5 Triage Agent failed!"
          echo "Check the workflow logs and artifacts for details."
          exit 1
