name: Deploy Orchestrator (Discord Bot) 🚀

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'orchestrator/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write  # For posting PR comments
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::579939802800:role/ProjectValine-GitHubDeployRole
          aws-region: us-west-2
      
      - name: Set environment variables from secrets
        run: |
          echo "STAGING_DISCORD_PUBLIC_KEY=${{ secrets.STAGING_DISCORD_PUBLIC_KEY }}" >> $GITHUB_ENV
          echo "STAGING_DISCORD_BOT_TOKEN=${{ secrets.STAGING_DISCORD_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "STAGING_GITHUB_TOKEN=${{ secrets.STAGING_GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "STAGING_GITHUB_WEBHOOK_SECRET=${{ secrets.STAGING_GITHUB_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL }}" >> $GITHUB_ENV
          echo "VITE_API_BASE=${{ secrets.VITE_API_BASE }}" >> $GITHUB_ENV
          # For Discord notifications (optional)
          echo "DISCORD_BOT_TOKEN=${{ secrets.STAGING_DISCORD_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "DISCORD_CHANNEL_ID=${{ secrets.DISCORD_DEPLOY_CHANNEL_ID }}" >> $GITHUB_ENV
          echo "DISCORD_DEPLOY_WEBHOOK=${{ secrets.DISCORD_DEPLOY_WEBHOOK }}" >> $GITHUB_ENV
      
      - name: Preflight - Validate SAM template
        id: validate
        working-directory: orchestrator
        run: |
          echo "🔍 Validating SAM template before deploy..."
          if sam validate --lint; then
            echo "✅ Template validation passed!"
          else
            echo "❌ Template validation failed!"
            echo "Fix template.yaml errors before deploying."
            exit 1
          fi
      
      - name: Notify deployment started
        if: env.DISCORD_DEPLOY_WEBHOOK != '' || (env.DISCORD_BOT_TOKEN != '' && env.DISCORD_CHANNEL_ID != '')
        working-directory: orchestrator
        run: |
          ./scripts/notify-deploy-status.sh "started" "🎮 Speedrunning Lambda deploy to AWS... Just chill, no manual setup needed!"
      
      - name: Generate deployment stamp
        working-directory: orchestrator
        run: ./scripts/generate-deploy-stamp.sh
      
      - name: SAM Build
        id: build
        working-directory: orchestrator
        run: |
          echo "🏗️ Building Lambda package with sam build..."
          sam build
          echo "✅ Build completed successfully!"
      
      - name: SAM Deploy
        id: deploy
        working-directory: orchestrator
        continue-on-error: true
        run: |
          echo "🚀 Deploying to AWS Lambda (repeating last successful config)..."
          
          # Attempt deploy
          if sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --force-upload \
            --parameter-overrides \
              "Stage=dev" \
              "DiscordPublicKey=${STAGING_DISCORD_PUBLIC_KEY}" \
              "DiscordBotToken=${STAGING_DISCORD_BOT_TOKEN}" \
              "GitHubToken=${STAGING_GITHUB_TOKEN}" \
              "GitHubWebhookSecret=${STAGING_GITHUB_WEBHOOK_SECRET}" \
              "FrontendBaseUrl=${FRONTEND_BASE_URL}" \
              "ViteApiBase=${VITE_API_BASE}" 2>&1 | tee /tmp/deploy-output.log; then
            echo "✅ Deploy completed successfully!"
            echo "deploy_result=success" >> $GITHUB_OUTPUT
          else
            echo "❌ Deploy failed!"
            echo "deploy_result=failure" >> $GITHUB_OUTPUT
            
            # Capture error for analysis
            if grep -q "S3 bucket" /tmp/deploy-output.log; then
              echo "error_type=s3_bucket" >> $GITHUB_OUTPUT
            elif grep -q "AccessDenied\|Forbidden" /tmp/deploy-output.log; then
              echo "error_type=iam_permissions" >> $GITHUB_OUTPUT
            elif grep -q "ResponseParserError\|Invalid JSON" /tmp/deploy-output.log; then
              echo "error_type=parser_error" >> $GITHUB_OUTPUT
            elif grep -q "StackSet.*does not exist" /tmp/deploy-output.log; then
              echo "error_type=stack_missing" >> $GITHUB_OUTPUT
            else
              echo "error_type=unknown" >> $GITHUB_OUTPUT
            fi
            
            exit 1
          fi
      
      - name: Check deploy result
        if: steps.deploy.outputs.deploy_result == 'failure'
        run: |
          echo "Deploy failed with error type: ${{ steps.deploy.outputs.error_type }}"
          exit 1
      
      - name: Verify Lambda deployment
        id: verify
        run: |
          echo "### 🎯 Lambda Deployment Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get Discord handler function info
          echo "**Discord Handler Function:**" >> $GITHUB_STEP_SUMMARY
          DISCORD_INFO=$(aws lambda get-function --function-name valine-orchestrator-discord-dev --query 'Configuration.[LastModified,CodeSize]' --output text)
          DISCORD_S3=$(aws lambda get-function --function-name valine-orchestrator-discord-dev --query 'Code.Location' --output text)
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Last Modified: $(echo $DISCORD_INFO | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
          echo "Code Size: $(echo $DISCORD_INFO | awk '{print $2}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "S3 Location: $DISCORD_S3" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get GitHub handler function info
          echo "**GitHub Handler Function:**" >> $GITHUB_STEP_SUMMARY
          GITHUB_INFO=$(aws lambda get-function --function-name valine-orchestrator-github-dev --query 'Configuration.[LastModified,CodeSize]' --output text)
          GITHUB_S3=$(aws lambda get-function --function-name valine-orchestrator-github-dev --query 'Code.Location' --output text)
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Last Modified: $(echo $GITHUB_INFO | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
          echo "Code Size: $(echo $GITHUB_INFO | awk '{print $2}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "S3 Location: $GITHUB_S3" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ Lambda functions are deployed and healthy!"
      
      - name: Get Discord webhook URL
        id: get-url
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name valine-orchestrator-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`DiscordWebhookUrl`].OutputValue' \
            --output text)
          echo "discord_url=$URL" >> $GITHUB_OUTPUT
          echo "### 🔗 Discord Webhook URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**Note:** This URL is already configured in Discord Developer Portal" >> $GITHUB_STEP_SUMMARY
      
      - name: Health Check - Test Discord Endpoint
        id: health-check
        working-directory: orchestrator
        run: |
          echo "🏥 Testing deployed Lambda endpoint..."
          ./scripts/test-discord-endpoint.sh
          echo "✅ Health check passed!"
      
      - name: Notify deployment success
        if: success() && (env.DISCORD_DEPLOY_WEBHOOK != '' || (env.DISCORD_BOT_TOKEN != '' && env.DISCORD_CHANNEL_ID != ''))
        working-directory: orchestrator
        run: |
          DISCORD_URL="${{ steps.get-url.outputs.discord_url }}"
          ./scripts/notify-deploy-status.sh "success" "🎮 **Deploy COMPLETE!** Lambda is live and ready to raid! 🎯

          **What's deployed:**
          • Discord Handler: \`valine-orchestrator-discord-dev\`
          • GitHub Handler: \`valine-orchestrator-github-dev\`
          • Endpoint: ${DISCORD_URL}

          **Status:** ✅ All systems operational. No manual setup needed. Just vibes! 💯"
      
      - name: Handle deployment failure
        if: failure()
        working-directory: orchestrator
        run: |
          echo "### ❌ Deployment Failed - Troubleshooting Guide" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          ERROR_TYPE="${{ steps.deploy.outputs.error_type }}"
          
          # Specific error handling based on type
          case "$ERROR_TYPE" in
            "s3_bucket")
              echo "**Error:** S3 bucket not found or inaccessible" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Quick Fix:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "# SAM will auto-create a managed bucket on first deploy" >> $GITHUB_STEP_SUMMARY
              echo "cd orchestrator" >> $GITHUB_STEP_SUMMARY
              echo "sam deploy --guided --resolve-s3" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ;;
            "iam_permissions")
              echo "**Error:** IAM permissions denied (AccessDenied/Forbidden)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Required Permissions:**" >> $GITHUB_STEP_SUMMARY
              echo "- CloudFormation: CreateStack, UpdateStack, DescribeStacks" >> $GITHUB_STEP_SUMMARY
              echo "- S3: PutObject, GetObject, ListBucket" >> $GITHUB_STEP_SUMMARY
              echo "- Lambda: CreateFunction, UpdateFunctionCode, GetFunction" >> $GITHUB_STEP_SUMMARY
              echo "- IAM: CreateRole, AttachRolePolicy (for Lambda execution role)" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Fix:** Update \`ProjectValine-GitHubDeployRole\` with required permissions" >> $GITHUB_STEP_SUMMARY
              ;;
            "parser_error")
              echo "**Error:** CloudFormation response parser error" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**This usually means stale cache or corrupted artifact**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Quick Fix:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "cd orchestrator" >> $GITHUB_STEP_SUMMARY
              echo "rm -rf .aws-sam/" >> $GITHUB_STEP_SUMMARY
              echo "sam build --use-container --force" >> $GITHUB_STEP_SUMMARY
              echo "sam deploy --force-upload" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ;;
            "stack_missing")
              echo "**Error:** CloudFormation stack does not exist" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**This is a first-time deploy or stack was deleted**" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Quick Fix:**" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
              echo "cd orchestrator" >> $GITHUB_STEP_SUMMARY
              echo "sam deploy --guided" >> $GITHUB_STEP_SUMMARY
              echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "**Error:** Unknown deployment failure" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "**Check the logs above for specific error details**" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🔍 Quick Diagnostics" >> $GITHUB_STEP_SUMMARY
          echo "1. **S3 Bucket Missing?** Check if your S3 bucket exists: \`aws-sam-cli-managed-default-samclisourcebucket-*\`" >> $GITHUB_STEP_SUMMARY
          echo "2. **IAM Permissions?** Verify the GitHub deploy role has Lambda, CloudFormation, and S3 permissions" >> $GITHUB_STEP_SUMMARY
          echo "3. **Secrets Configured?** Check that all required GitHub secrets are set" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "#### 🛠️ Recovery Options" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Option 1: Force Fresh Deploy (Recommended)**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "cd orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "rm -rf .aws-sam/" >> $GITHUB_STEP_SUMMARY
          echo "sam build --use-container --force" >> $GITHUB_STEP_SUMMARY
          echo "sam deploy --force-upload" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Option 2: Manual Deploy with Guided Setup**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "cd orchestrator" >> $GITHUB_STEP_SUMMARY
          echo "sam deploy --guided" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Option 3: Check CloudWatch Logs**" >> $GITHUB_STEP_SUMMARY
          echo "View Lambda logs: [CloudWatch Console](https://console.aws.amazon.com/cloudwatch/home?region=us-west-2#logsV2:log-groups)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📚 **Full recovery guide:** [orchestrator/docs/LAMBDA_DEPLOY_RECOVERY.md](https://github.com/gcolon75/Project-Valine/blob/main/orchestrator/docs/LAMBDA_DEPLOY_RECOVERY.md)" >> $GITHUB_STEP_SUMMARY
      
      - name: Create audit artifact
        if: always()
        run: |
          mkdir -p /tmp/deploy-audit
          
          # Determine deploy result
          RESULT="unknown"
          if [ "${{ job.status }}" = "success" ]; then
            RESULT="success"
          elif [ "${{ job.status }}" = "failure" ]; then
            RESULT="failure"
          fi
          
          # Get stack name from samconfig
          STACK_NAME=$(grep -A5 "^\[default\.global\.parameters\]" orchestrator/samconfig.toml | grep "stack_name" | awk -F'"' '{print $2}' || echo "valine-orchestrator-staging")
          REGION=$(grep -A10 "^\[default\.deploy\.parameters\]" orchestrator/samconfig.toml | grep "region" | awk -F'"' '{print $2}' || echo "us-west-2")
          S3_PREFIX=$(grep -A10 "^\[default\.deploy\.parameters\]" orchestrator/samconfig.toml | grep "s3_prefix" | awk -F'"' '{print $2}' || echo "valine-orchestrator-staging")
          
          # Get error info if failed
          ERROR_TYPE="${{ steps.deploy.outputs.error_type }}"
          if [ -z "$ERROR_TYPE" ]; then
            ERROR_TYPE="none"
          fi
          
          cat > /tmp/deploy-audit/deploy-report.json <<EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit_sha": "${{ github.sha }}",
            "commit_short": "${GITHUB_SHA:0:7}",
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_url": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
            "result": "${RESULT}",
            "error_type": "${ERROR_TYPE}",
            "stack_name": "${STACK_NAME}",
            "region": "${REGION}",
            "s3_prefix": "${S3_PREFIX}",
            "actor": "${{ github.actor }}",
            "ref": "${{ github.ref }}",
            "validation_passed": "${{ steps.validate.outputs.validation_result }}",
            "deploy_result": "${{ steps.deploy.outputs.deploy_result }}"
          }
          EOF
          
          # Copy deploy output if it exists
          if [ -f /tmp/deploy-output.log ]; then
            cp /tmp/deploy-output.log /tmp/deploy-audit/deploy-output.log
          fi
          
          echo "📝 Deploy audit report created"
      
      - name: Upload audit artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deploy-audit-${{ github.sha }}
          path: /tmp/deploy-audit/
          retention-days: 90
      
      - name: Notify deployment failure
        if: failure() && (env.DISCORD_DEPLOY_WEBHOOK != '' || (env.DISCORD_BOT_TOKEN != '' && env.DISCORD_CHANNEL_ID != ''))
        working-directory: orchestrator
        run: |
          ERROR_TYPE="${{ steps.deploy.outputs.error_type }}"
          
          # Build error-specific message
          case "$ERROR_TYPE" in
            "s3_bucket")
              ERROR_MSG="S3 bucket not found → Run \`sam deploy --guided --resolve-s3\`"
              ;;
            "iam_permissions")
              ERROR_MSG="IAM permissions denied → Check ProjectValine-GitHubDeployRole has CloudFormation, Lambda, S3 access"
              ;;
            "parser_error")
              ERROR_MSG="Parser error (likely stale cache) → Run \`rm -rf .aws-sam/ && sam build --use-container --force && sam deploy --force-upload\`"
              ;;
            "stack_missing")
              ERROR_MSG="CloudFormation stack missing → Run \`sam deploy --guided\` for first-time setup"
              ;;
            *)
              ERROR_MSG="Unknown error → Check logs above for details"
              ;;
          esac
          
          ./scripts/notify-deploy-status.sh "failure" "💀 **Deploy FAILED!** Lambda deployment encountered an error.

          **Error Type:** ${ERROR_TYPE}
          **Issue:** ${ERROR_MSG}

          **Common fixes:**
          • 🗑️ S3 bucket missing → SAM will create one on guided deploy
          • 🔐 IAM permissions → Check GitHub deploy role
          • 🔑 Secrets not set → Verify GitHub repository secrets
          • 💾 Stale cache → Force fresh build with \`--use-container --force\`

          **Quick recovery:**
          \`\`\`bash
          cd orchestrator && sam deploy --guided
          \`\`\`

          📋 **View full logs:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          📚 **Recovery guide:** orchestrator/docs/LAMBDA_DEPLOY_RECOVERY.md"
