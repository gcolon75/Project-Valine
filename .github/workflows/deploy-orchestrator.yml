name: Deploy Orchestrator (Discord Bot)

on:
  workflow_dispatch:
  push:
    branches: [main]
    paths:
      - 'orchestrator/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::579939802800:role/ProjectValine-GitHubDeployRole
          aws-region: us-west-2
      
      - name: Set environment variables from secrets
        run: |
          echo "STAGING_DISCORD_PUBLIC_KEY=${{ secrets.STAGING_DISCORD_PUBLIC_KEY }}" >> $GITHUB_ENV
          echo "STAGING_DISCORD_BOT_TOKEN=${{ secrets.STAGING_DISCORD_BOT_TOKEN }}" >> $GITHUB_ENV
          echo "STAGING_GITHUB_TOKEN=${{ secrets.STAGING_GITHUB_TOKEN }}" >> $GITHUB_ENV
          echo "STAGING_GITHUB_WEBHOOK_SECRET=${{ secrets.STAGING_GITHUB_WEBHOOK_SECRET }}" >> $GITHUB_ENV
          echo "FRONTEND_BASE_URL=${{ secrets.FRONTEND_BASE_URL }}" >> $GITHUB_ENV
          echo "VITE_API_BASE=${{ secrets.VITE_API_BASE }}" >> $GITHUB_ENV
      
      - name: Generate deployment stamp
        working-directory: orchestrator
        run: ./scripts/generate-deploy-stamp.sh
      
      - name: SAM Build
        working-directory: orchestrator
        run: sam build
      
      - name: SAM Deploy
        working-directory: orchestrator
        run: |
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --force-upload \
            --parameter-overrides \
              "Stage=dev" \
              "DiscordPublicKey=${STAGING_DISCORD_PUBLIC_KEY}" \
              "DiscordBotToken=${STAGING_DISCORD_BOT_TOKEN}" \
              "GitHubToken=${STAGING_GITHUB_TOKEN}" \
              "GitHubWebhookSecret=${STAGING_GITHUB_WEBHOOK_SECRET}" \
              "FrontendBaseUrl=${FRONTEND_BASE_URL}" \
              "ViteApiBase=${VITE_API_BASE}"
      
      - name: Verify Lambda deployment
        run: |
          echo "### Lambda Deployment Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get Discord handler function info
          echo "**Discord Handler Function:**" >> $GITHUB_STEP_SUMMARY
          DISCORD_INFO=$(aws lambda get-function --function-name valine-orchestrator-discord-dev --query 'Configuration.[LastModified,CodeSize]' --output text)
          DISCORD_S3=$(aws lambda get-function --function-name valine-orchestrator-discord-dev --query 'Code.Location' --output text)
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Last Modified: $(echo $DISCORD_INFO | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
          echo "Code Size: $(echo $DISCORD_INFO | awk '{print $2}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "S3 Location: $DISCORD_S3" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Get GitHub handler function info
          echo "**GitHub Handler Function:**" >> $GITHUB_STEP_SUMMARY
          GITHUB_INFO=$(aws lambda get-function --function-name valine-orchestrator-github-dev --query 'Configuration.[LastModified,CodeSize]' --output text)
          GITHUB_S3=$(aws lambda get-function --function-name valine-orchestrator-github-dev --query 'Code.Location' --output text)
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "Last Modified: $(echo $GITHUB_INFO | awk '{print $1}')" >> $GITHUB_STEP_SUMMARY
          echo "Code Size: $(echo $GITHUB_INFO | awk '{print $2}') bytes" >> $GITHUB_STEP_SUMMARY
          echo "S3 Location: $GITHUB_S3" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      
      - name: Get Discord webhook URL
        id: get-url
        run: |
          URL=$(aws cloudformation describe-stacks \
            --stack-name valine-orchestrator-staging \
            --query 'Stacks[0].Outputs[?OutputKey==`DiscordWebhookUrl`].OutputValue' \
            --output text)
          echo "discord_url=$URL" >> $GITHUB_OUTPUT
          echo "### Discord Webhook URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "$URL" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "**Next step:** Paste this URL into Discord Developer Portal â†’ Interactions Endpoint URL" >> $GITHUB_STEP_SUMMARY
      
      - name: Health Check - Test Discord Endpoint
        working-directory: orchestrator
        run: |
          echo "Testing deployed Lambda endpoint..."
          ./scripts/test-discord-endpoint.sh
