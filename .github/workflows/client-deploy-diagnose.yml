name: Client Deploy Diagnose

on:
  workflow_dispatch:
    inputs:
      VITE_API_BASE:
        description: "Override API base URL for HTTP checks (leave empty to use secret)"
        required: false
        default: ""
      S3_BUCKET:
        description: "Override S3 bucket name (leave empty to use secret)"
        required: false
        default: ""
      CLOUDFRONT_DISTRIBUTION_ID:
        description: "Override CloudFront distribution ID (leave empty to use secret)"
        required: false
        default: ""

jobs:
  diagnose:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: us-west-2
      EFFECTIVE_VITE_API_BASE: ${{ inputs.VITE_API_BASE != '' && inputs.VITE_API_BASE || secrets.VITE_API_BASE }}
      EFFECTIVE_S3_BUCKET: ${{ inputs.S3_BUCKET != '' && inputs.S3_BUCKET || secrets.S3_BUCKET }}
      EFFECTIVE_CLOUDFRONT_ID: ${{ inputs.CLOUDFRONT_DISTRIBUTION_ID != '' && inputs.CLOUDFRONT_DISTRIBUTION_ID || secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      FRONTEND_BASE_URL: ${{ secrets.FRONTEND_BASE_URL }}
    
    steps:
      - name: Install jq if missing
        run: |
          if ! command -v jq &> /dev/null; then
            sudo apt-get update && sudo apt-get install -y jq
          fi
      
      - name: Prepare and summarize inputs
        run: |
          echo "## Diagnostic Configuration" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "| Variable | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|----------|--------|" >> "$GITHUB_STEP_SUMMARY"
          
          if [ -n "${{ env.EFFECTIVE_VITE_API_BASE }}" ]; then
            echo "| VITE_API_BASE | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| VITE_API_BASE | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "${{ env.EFFECTIVE_S3_BUCKET }}" ]; then
            echo "| S3_BUCKET | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| S3_BUCKET | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "${{ env.EFFECTIVE_CLOUDFRONT_ID }}" ]; then
            echo "| CLOUDFRONT_DISTRIBUTION_ID | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| CLOUDFRONT_DISTRIBUTION_ID | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -n "${{ env.FRONTEND_BASE_URL }}" ]; then
            echo "| FRONTEND_BASE_URL | ✅ Present |" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "| FRONTEND_BASE_URL | ❌ Not set |" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Configure AWS via OIDC
        id: aws_config
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::579939802800:role/ProjectValine-GitHubDeployRole
          aws-region: ${{ env.AWS_REGION }}
      
      - name: AWS identity check
        id: aws_identity
        run: |
          echo "## AWS Identity Check" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          IDENTITY=$(aws sts get-caller-identity)
          ACCOUNT=$(echo "$IDENTITY" | jq -r '.Account')
          ARN=$(echo "$IDENTITY" | jq -r '.Arn')
          
          echo "- **Account:** $ACCOUNT" >> "$GITHUB_STEP_SUMMARY"
          echo "- **Arn:** $ARN" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: S3 checks - List bucket
        id: s3_list
        if: env.EFFECTIVE_S3_BUCKET != ''
        continue-on-error: true
        run: |
          echo "## S3 Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Bucket Listing (s3://${{ env.EFFECTIVE_S3_BUCKET }})" >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          aws s3 ls "s3://${{ env.EFFECTIVE_S3_BUCKET }}" 2>&1 | head -10 >> "$GITHUB_STEP_SUMMARY"
          echo '```' >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: S3 checks - Check index.html
        id: s3_index
        if: env.EFFECTIVE_S3_BUCKET != ''
        continue-on-error: true
        run: |
          echo "### Index.html Check" >> "$GITHUB_STEP_SUMMARY"
          if aws s3 ls "s3://${{ env.EFFECTIVE_S3_BUCKET }}/index.html" &> /dev/null; then
            echo "✅ index.html found" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
            
            # Get cache-control for index.html
            echo "**index.html headers:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            aws s3api head-object --bucket "${{ env.EFFECTIVE_S3_BUCKET }}" --key "index.html" 2>&1 | jq -r '.CacheControl // "No Cache-Control header"' >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ index.html not found" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
      
      - name: S3 checks - Check asset headers
        id: s3_asset
        if: env.EFFECTIVE_S3_BUCKET != ''
        continue-on-error: true
        run: |
          # Try to find an asset file
          ASSET_FILE=$(aws s3 ls "s3://${{ env.EFFECTIVE_S3_BUCKET }}/assets/" 2>/dev/null | head -1 | awk '{print $NF}')
          
          if [ -n "$ASSET_FILE" ]; then
            echo "**Sample asset (assets/$ASSET_FILE) headers:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            aws s3api head-object --bucket "${{ env.EFFECTIVE_S3_BUCKET }}" --key "assets/$ASSET_FILE" 2>&1 | jq -r '.CacheControl // "No Cache-Control header"' >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "ℹ️ No assets found in assets/ directory" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
      
      - name: CloudFront checks - Get distribution
        id: cf_distribution
        if: env.EFFECTIVE_CLOUDFRONT_ID != ''
        continue-on-error: true
        run: |
          echo "## CloudFront Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          DIST_INFO=$(aws cloudfront get-distribution --id "${{ env.EFFECTIVE_CLOUDFRONT_ID }}" 2>&1)
          
          if echo "$DIST_INFO" | jq -e '.Distribution' > /dev/null 2>&1; then
            DOMAIN=$(echo "$DIST_INFO" | jq -r '.Distribution.DomainName')
            STATUS=$(echo "$DIST_INFO" | jq -r '.Distribution.Status')
            
            echo "### Distribution Info" >> "$GITHUB_STEP_SUMMARY"
            echo "- **DomainName:** $DOMAIN" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Status:** $STATUS" >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "❌ Failed to get distribution info" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$DIST_INFO" | head -5 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "" >> "$GITHUB_STEP_SUMMARY"
          fi
      
      - name: CloudFront checks - List invalidations
        id: cf_invalidations
        if: env.EFFECTIVE_CLOUDFRONT_ID != ''
        continue-on-error: true
        run: |
          echo "### Recent Invalidations" >> "$GITHUB_STEP_SUMMARY"
          
          INVALIDATIONS=$(aws cloudfront list-invalidations --distribution-id "${{ env.EFFECTIVE_CLOUDFRONT_ID }}" 2>&1)
          
          if echo "$INVALIDATIONS" | jq -e '.InvalidationList.Items' > /dev/null 2>&1; then
            LATEST=$(echo "$INVALIDATIONS" | jq -r '.InvalidationList.Items[0]')
            
            if [ "$LATEST" != "null" ] && [ -n "$LATEST" ]; then
              INV_ID=$(echo "$LATEST" | jq -r '.Id')
              INV_STATUS=$(echo "$LATEST" | jq -r '.Status')
              INV_TIME=$(echo "$LATEST" | jq -r '.CreateTime')
              
              echo "- **Latest ID:** $INV_ID" >> "$GITHUB_STEP_SUMMARY"
              echo "- **Status:** $INV_STATUS" >> "$GITHUB_STEP_SUMMARY"
              echo "- **Created:** $INV_TIME" >> "$GITHUB_STEP_SUMMARY"
            else
              echo "ℹ️ No invalidations found" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "❌ Failed to list invalidations" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$INVALIDATIONS" | head -5 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: HTTP checks - Frontend reachability
        id: http_frontend
        if: env.FRONTEND_BASE_URL != ''
        continue-on-error: true
        run: |
          echo "## HTTP Reachability Checks" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          echo "### Frontend (https://${{ env.FRONTEND_BASE_URL }})" >> "$GITHUB_STEP_SUMMARY"
          
          HTTP_RESPONSE=$(curl -sS -I "https://${{ env.FRONTEND_BASE_URL }}" 2>&1 || true)
          
          if echo "$HTTP_RESPONSE" | grep -q "HTTP"; then
            STATUS_LINE=$(echo "$HTTP_RESPONSE" | grep "HTTP" | head -1)
            echo "- **Status:** $STATUS_LINE" >> "$GITHUB_STEP_SUMMARY"
            
            # Show a few key headers
            CONTENT_TYPE=$(echo "$HTTP_RESPONSE" | grep -i "content-type:" | head -1 || echo "")
            CACHE_CONTROL=$(echo "$HTTP_RESPONSE" | grep -i "cache-control:" | head -1 || echo "")
            
            if [ -n "$CONTENT_TYPE" ]; then
              echo "- $CONTENT_TYPE" >> "$GITHUB_STEP_SUMMARY"
            fi
            if [ -n "$CACHE_CONTROL" ]; then
              echo "- $CACHE_CONTROL" >> "$GITHUB_STEP_SUMMARY"
            fi
          else
            echo "❌ Failed to reach frontend" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$HTTP_RESPONSE" | head -5 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: HTTP checks - API health endpoint
        id: http_api_health
        if: env.EFFECTIVE_VITE_API_BASE != ''
        continue-on-error: true
        run: |
          echo "### API Health (${{ env.EFFECTIVE_VITE_API_BASE }}/health)" >> "$GITHUB_STEP_SUMMARY"
          
          HTTP_CODE=$(curl -sS -w "%{http_code}" -D /tmp/api_health_headers.txt -o /tmp/api_health_body.txt "${{ env.EFFECTIVE_VITE_API_BASE }}/health" 2>&1 || echo "000")
          
          echo "- **Status Code:** $HTTP_CODE" >> "$GITHUB_STEP_SUMMARY"
          
          if [ -f /tmp/api_health_headers.txt ]; then
            STATUS_LINE=$(head -1 /tmp/api_health_headers.txt)
            echo "- **Response:** $STATUS_LINE" >> "$GITHUB_STEP_SUMMARY"
          fi
          
          if [ -f /tmp/api_health_body.txt ] && [ -s /tmp/api_health_body.txt ]; then
            echo "- **Body:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            head -20 /tmp/api_health_body.txt >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: HTTP checks - API hello endpoint
        id: http_api_hello
        if: env.EFFECTIVE_VITE_API_BASE != ''
        continue-on-error: true
        run: |
          echo "### API Hello (${{ env.EFFECTIVE_VITE_API_BASE }}/hello)" >> "$GITHUB_STEP_SUMMARY"
          
          HTTP_RESPONSE=$(curl -sS "${{ env.EFFECTIVE_VITE_API_BASE }}/hello" 2>&1 || echo "Failed to reach endpoint")
          HTTP_CODE=$?
          
          if [ $HTTP_CODE -eq 0 ]; then
            echo "- **Status:** Success" >> "$GITHUB_STEP_SUMMARY"
            echo "- **Response:**" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$HTTP_RESPONSE" | head -20 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          else
            echo "- **Status:** Failed (curl exit code $HTTP_CODE)" >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
            echo "$HTTP_RESPONSE" | head -10 >> "$GITHUB_STEP_SUMMARY"
            echo '```' >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "" >> "$GITHUB_STEP_SUMMARY"
      
      - name: Final status summary
        if: always()
        run: |
          echo "## Diagnostic Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          # Secrets presence check
          SECRETS_OK="✅"
          if [ -z "${{ env.EFFECTIVE_VITE_API_BASE }}" ] || [ -z "${{ env.EFFECTIVE_S3_BUCKET }}" ] || [ -z "${{ env.EFFECTIVE_CLOUDFRONT_ID }}" ]; then
            SECRETS_OK="⚠️"
          fi
          
          # AWS assume check
          AWS_ASSUME="✅"
          if [ "${{ steps.aws_config.outcome }}" != "success" ] || [ "${{ steps.aws_identity.outcome }}" != "success" ]; then
            AWS_ASSUME="❌"
          fi
          
          # S3 access check
          S3_ACCESS="✅"
          if [ -n "${{ env.EFFECTIVE_S3_BUCKET }}" ]; then
            if [ "${{ steps.s3_list.outcome }}" != "success" ]; then
              S3_ACCESS="❌"
            fi
          else
            S3_ACCESS="⚠️ (not configured)"
          fi
          
          # CloudFront access check
          CF_ACCESS="✅"
          if [ -n "${{ env.EFFECTIVE_CLOUDFRONT_ID }}" ]; then
            if [ "${{ steps.cf_distribution.outcome }}" != "success" ]; then
              CF_ACCESS="❌"
            fi
          else
            CF_ACCESS="⚠️ (not configured)"
          fi
          
          # Frontend reachability check
          FRONTEND_REACH="✅"
          if [ -n "${{ env.FRONTEND_BASE_URL }}" ]; then
            if [ "${{ steps.http_frontend.outcome }}" != "success" ]; then
              FRONTEND_REACH="❌"
            fi
          else
            FRONTEND_REACH="⚠️ (not configured)"
          fi
          
          # API health check
          API_HEALTH="✅"
          if [ -n "${{ env.EFFECTIVE_VITE_API_BASE }}" ]; then
            if [ "${{ steps.http_api_health.outcome }}" != "success" ] && [ "${{ steps.http_api_hello.outcome }}" != "success" ]; then
              API_HEALTH="❌"
            elif [ "${{ steps.http_api_health.outcome }}" != "success" ] || [ "${{ steps.http_api_hello.outcome }}" != "success" ]; then
              API_HEALTH="⚠️"
            fi
          else
            API_HEALTH="⚠️ (not configured)"
          fi
          
          echo "| Check | Status |" >> "$GITHUB_STEP_SUMMARY"
          echo "|-------|--------|" >> "$GITHUB_STEP_SUMMARY"
          echo "| Required secrets present | $SECRETS_OK |" >> "$GITHUB_STEP_SUMMARY"
          echo "| AWS OIDC role assume | $AWS_ASSUME |" >> "$GITHUB_STEP_SUMMARY"
          echo "| S3 bucket access | $S3_ACCESS |" >> "$GITHUB_STEP_SUMMARY"
          echo "| CloudFront access | $CF_ACCESS |" >> "$GITHUB_STEP_SUMMARY"
          echo "| Frontend reachability | $FRONTEND_REACH |" >> "$GITHUB_STEP_SUMMARY"
          echo "| API health endpoints | $API_HEALTH |" >> "$GITHUB_STEP_SUMMARY"
          echo "" >> "$GITHUB_STEP_SUMMARY"
          
          echo "---" >> "$GITHUB_STEP_SUMMARY"
          echo "*Diagnostic completed at $(date -u '+%Y-%m-%d %H:%M:%S UTC')*" >> "$GITHUB_STEP_SUMMARY"
