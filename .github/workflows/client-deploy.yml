name: Client Deploy
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      VITE_API_BASE:
        description: "Override API base URL (leave empty to use saved secret)"
        required: false
        default: ""
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    env:
      VITE_API_BASE: ${{ inputs.VITE_API_BASE != '' && inputs.VITE_API_BASE || secrets.VITE_API_BASE }}
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      AWS_REGION: us-west-2
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Configure AWS via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::579939802800:role/ProjectValine-GitHubDeployRole
          aws-region: ${{ env.AWS_REGION }}
      - name: Check required env
        run: |
          if [ -z "${{ env.S3_BUCKET }}" ]; then
            echo "S3_BUCKET secret is required"; exit 1; fi
          if [ -z "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" ]; then
            echo "CLOUDFRONT_DISTRIBUTION_ID secret is required"; exit 1; fi
          if [ -z "${{ env.VITE_API_BASE }}" ]; then
            echo "VITE_API_BASE is required (set workflow input or repo/org secret)"; exit 1; fi
      - name: Install dependencies
        run: npm ci
      - name: Build client (Vite)
        run: |
          export VITE_API_BASE="${{ env.VITE_API_BASE }}"
          npm run build
      - name: Sync to S3 (assets, cached)
        run: |
          aws s3 sync dist "s3://${{ env.S3_BUCKET }}" \
            --delete \
            --cache-control "public, max-age=300" \
            --exclude "*.html"
      - name: Sync to S3 (HTML, no-cache)
        run: |
          aws s3 sync dist "s3://${{ env.S3_BUCKET }}" \
            --exclude "*" --include "*.html" \
            --cache-control "no-cache"
      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ env.CLOUDFRONT_DISTRIBUTION_ID }}" \
            --paths "/*"
      - name: Deployment summary
        run: |
          if [ -n "${{ secrets.FRONTEND_BASE_URL }}" ]; then
            echo "Frontend: https://${{ secrets.FRONTEND_BASE_URL }}" >> "$GITHUB_STEP_SUMMARY"
          fi
          echo "API base: ${{ env.VITE_API_BASE }}" >> "$GITHUB_STEP_SUMMARY"
      - name: Notify Discord via Webhook
        if: ${{ secrets.DISCORD_DEPLOY_WEBHOOK != '' }}
        run: |
          WEBHOOK_URL="${{ secrets.DISCORD_DEPLOY_WEBHOOK }}"
          FRONTEND_URL="${{ secrets.FRONTEND_BASE_URL }}"
          API_BASE="${{ env.VITE_API_BASE }}"
          COMMIT_SHA="${{ github.sha }}"
          COMMIT_SHORT="${COMMIT_SHA:0:7}"
          WORKFLOW_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          COMMIT_URL="${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          ACTOR="${{ github.actor }}"
          
          # Build embed fields
          FIELDS='[]'
          if [ -n "$FRONTEND_URL" ]; then
            FIELDS=$(echo "$FIELDS" | jq --arg url "https://$FRONTEND_URL" '. += [{"name": "Frontend URL", "value": $url, "inline": false}]')
          fi
          FIELDS=$(echo "$FIELDS" | jq --arg api "$API_BASE" '. += [{"name": "API Base", "value": $api, "inline": false}]')
          FIELDS=$(echo "$FIELDS" | jq --arg commit "$COMMIT_SHORT" --arg url "$COMMIT_URL" '. += [{"name": "Commit", "value": ("[`\($commit)`](\($url))"), "inline": true}]')
          FIELDS=$(echo "$FIELDS" | jq --arg actor "$ACTOR" '. += [{"name": "Deployed by", "value": $actor, "inline": true}]')
          
          # Build the payload
          payload=$(jq -nc \
            --arg content "✅ Frontend deployment successful" \
            --arg title "Client Deploy - Project Valine" \
            --arg desc "Successfully deployed frontend to S3 and invalidated CloudFront cache" \
            --arg url "$WORKFLOW_URL" \
            --argjson fields "$FIELDS" \
            '{
              content: $content,
              embeds: [{
                title: $title,
                description: $desc,
                color: 3066993,
                url: $url,
                fields: $fields,
                timestamp: (now | strftime("%Y-%m-%dT%H:%M:%SZ"))
              }]
            }')
          
          # Send to Discord webhook
          http_code=$(curl -sS -w "%{http_code}" -o /tmp/discord_response.txt \
            -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$payload")
          
          if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
            echo "✅ Discord notification sent successfully (HTTP $http_code)" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "⚠️ Discord notification failed (HTTP $http_code)" >> "$GITHUB_STEP_SUMMARY"
            cat /tmp/discord_response.txt >> "$GITHUB_STEP_SUMMARY" 2>/dev/null || true
          fi
