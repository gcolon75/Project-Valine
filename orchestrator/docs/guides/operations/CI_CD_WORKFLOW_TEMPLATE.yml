# CI/CD Workflow Template for Orchestrator
# This file should be copied to ghawk75-ai-agent/.github/workflows/orchestrator-ci.yml

name: Orchestrator CI/CD

on:
  pull_request:
    paths:
      - 'orchestrator/**'
      - '.github/workflows/orchestrator-ci.yml'
  push:
    branches:
      - main
    paths:
      - 'orchestrator/**'

env:
  PYTHON_VERSION: '3.11'

jobs:
  lint:
    name: Lint Python Code
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('orchestrator/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd orchestrator
          pip install -r requirements.txt
          pip install flake8 black isort
      
      - name: Run flake8
        run: |
          cd orchestrator
          flake8 app/ --max-line-length=120 --extend-ignore=E203,W503
      
      - name: Check code formatting with black
        run: |
          cd orchestrator
          black --check app/ --line-length=120
      
      - name: Check import sorting with isort
        run: |
          cd orchestrator
          isort --check-only app/ --profile black

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('orchestrator/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd orchestrator
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-mock
      
      - name: Run tests
        run: |
          cd orchestrator
          if [ -d "tests" ]; then
            pytest tests/ --cov=app --cov-report=xml --cov-report=term
          else
            echo "No tests directory found - skipping tests"
            echo "⚠️ TODO: Add tests in tests/ directory"
          fi
      
      - name: Upload coverage to Codecov (optional)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: codecov/codecov-action@v3
        with:
          file: ./orchestrator/coverage.xml
          flags: orchestrator
          fail_ci_if_error: false

  build:
    name: SAM Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: SAM Build
        run: |
          cd orchestrator
          sam build --use-container
      
      - name: Validate SAM Template
        run: |
          cd orchestrator
          sam validate --lint
      
      - name: Upload build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v3
        with:
          name: sam-build
          path: orchestrator/.aws-sam/build
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit safety
      
      - name: Run Bandit security scan
        run: |
          cd orchestrator
          bandit -r app/ -f json -o bandit-report.json || true
          bandit -r app/ || true
      
      - name: Check dependencies for vulnerabilities
        run: |
          cd orchestrator
          safety check --file requirements.txt || true
      
      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: security-reports
          path: orchestrator/bandit-report.json
          retention-days: 30

  # Deployment job - requires manual approval for production
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      
      - name: SAM Build
        run: |
          cd orchestrator
          sam build --use-container
      
      - name: SAM Deploy to Dev
        run: |
          cd orchestrator
          sam deploy \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Stage=dev \
              DiscordPublicKey=${{ secrets.DISCORD_PUBLIC_KEY }} \
              DiscordBotToken=${{ secrets.DISCORD_BOT_TOKEN }} \
              GitHubToken=${{ secrets.GITHUB_TOKEN_ORCHESTRATOR }} \
              GitHubWebhookSecret=${{ secrets.GITHUB_WEBHOOK_SECRET }}
      
      - name: Get Stack Outputs
        id: outputs
        run: |
          cd orchestrator
          DISCORD_URL=$(aws cloudformation describe-stacks \
            --stack-name valine-orchestrator \
            --query 'Stacks[0].Outputs[?OutputKey==`DiscordWebhookUrl`].OutputValue' \
            --output text)
          GITHUB_URL=$(aws cloudformation describe-stacks \
            --stack-name valine-orchestrator \
            --query 'Stacks[0].Outputs[?OutputKey==`GitHubWebhookUrl`].OutputValue' \
            --output text)
          echo "discord_url=$DISCORD_URL" >> $GITHUB_OUTPUT
          echo "github_url=$GITHUB_URL" >> $GITHUB_OUTPUT
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🚀 Deployed to Dev Environment\n\n' +
                    '**Discord Webhook**: ${{ steps.outputs.outputs.discord_url }}\n' +
                    '**GitHub Webhook**: ${{ steps.outputs.outputs.github_url }}'
            })

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [lint, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    # This requires manual approval in GitHub environments settings
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up AWS SAM CLI
        uses: aws-actions/setup-sam@v2
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
          aws-region: us-west-2
      
      - name: SAM Build
        run: |
          cd orchestrator
          sam build --use-container
      
      - name: SAM Deploy to Production
        run: |
          cd orchestrator
          sam deploy \
            --config-env prod \
            --no-confirm-changeset \
            --no-fail-on-empty-changeset \
            --parameter-overrides \
              Stage=prod \
              DiscordPublicKey=${{ secrets.DISCORD_PUBLIC_KEY_PROD }} \
              DiscordBotToken=${{ secrets.DISCORD_BOT_TOKEN_PROD }} \
              GitHubToken=${{ secrets.GITHUB_TOKEN_ORCHESTRATOR_PROD }} \
              GitHubWebhookSecret=${{ secrets.GITHUB_WEBHOOK_SECRET_PROD }}
      
      - name: Get Stack Outputs
        run: |
          aws cloudformation describe-stacks \
            --stack-name valine-orchestrator-prod \
            --query 'Stacks[0].Outputs' \
            --output table
      
      - name: Notify deployment
        if: success()
        run: |
          echo "✅ Production deployment successful"
          # Add Slack/Discord notification here if needed

# Required GitHub Secrets:
# Development:
# - AWS_ACCESS_KEY_ID
# - AWS_SECRET_ACCESS_KEY
# - DISCORD_PUBLIC_KEY
# - DISCORD_BOT_TOKEN
# - GITHUB_TOKEN_ORCHESTRATOR (don't use default GITHUB_TOKEN, use a PAT)
# - GITHUB_WEBHOOK_SECRET
#
# Production (separate credentials):
# - AWS_ACCESS_KEY_ID_PROD
# - AWS_SECRET_ACCESS_KEY_PROD
# - DISCORD_PUBLIC_KEY_PROD
# - DISCORD_BOT_TOKEN_PROD
# - GITHUB_TOKEN_ORCHESTRATOR_PROD
# - GITHUB_WEBHOOK_SECRET_PROD
#
# Required GitHub Environments:
# - development (optional approval)
# - production (REQUIRED manual approval)
